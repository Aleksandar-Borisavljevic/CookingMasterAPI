// <auto-generated />
using System;
using CookingMasterApi.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CookingMasterApi.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(CookingMasterDbContext))]
    [Migration("20240128192745_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.CuisineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CuisineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CuisineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2037),
                            CuisineName = "Italian",
                            Uid = new Guid("e18ab0bd-4889-4615-8796-363b1a1f3838")
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2091),
                            CuisineName = "Indian",
                            Uid = new Guid("27017c68-053d-4ad6-ba91-9653466462a4")
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2094),
                            CuisineName = "Mexican",
                            Uid = new Guid("a8790222-9edc-4796-bb6b-d117b2916378")
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2102),
                            CuisineName = "Chinese",
                            Uid = new Guid("1edea285-089b-425d-9e73-7a4202db7127")
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2105),
                            CuisineName = "French",
                            Uid = new Guid("5f7b9e1c-8304-416f-b5c1-24b6f5e2ed08")
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2108),
                            CuisineName = "Thai",
                            Uid = new Guid("60d96b46-7894-4895-b7a8-63847ec2798f")
                        });
                });

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.CulinaryRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CuisineTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CuisineTypeId");

                    b.ToTable("CulinaryRecipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2453),
                            CuisineTypeId = 1,
                            RecipeDescription = "Instructions:\r\n\r\nCook the spaghetti according to package instructions. Drain and set aside.\r\n\r\nIn a large pan, heat olive oil over medium heat. Add the chopped onion and sauté until softened.\r\n\r\nAdd minced garlic to the pan and sauté for another 1-2 minutes until fragrant.\r\n\r\nAdd ground beef to the pan and cook until browned, breaking it apart with a spoon as it cooks.\r\n\r\nStir in grated carrots and chopped celery. Cook for a few minutes until the vegetables begin to soften.\r\n\r\nAdd crushed tomatoes, tomato paste, dried oregano, and dried basil to the pan. Season with salt and pepper to taste. Stir well to combine.\r\n\r\nReduce the heat to low, cover the pan, and let the sauce simmer for at least 20-30 minutes to allow the flavors to meld.\r\n\r\nTaste and adjust the seasoning if necessary.\r\n\r\nServe the Bolognese sauce over the cooked spaghetti.\r\n\r\nOptionally, garnish with grated Parmesan cheese and fresh basil or parsley.\r\n\r\nEnjoy your homemade Spaghetti Bolognese! Feel free to customize the recipe based on your preferences.",
                            RecipeName = "Spaghetti Bolognese",
                            Uid = new Guid("c182a84c-9e35-4214-9994-5c4cd61c4d7a")
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2457),
                            CuisineTypeId = 1,
                            RecipeDescription = "Preheat the Oven:\r\nPreheat your oven to the temperature recommended for your pizza dough (usually around 450°F or 230°C).\r\n\r\nPrepare the Pizza Dough:\r\nIf using store-bought dough, follow the instructions on the package. If making homemade dough, roll it out on a floured surface to your desired thickness.\r\n\r\nAssemble the Pizza:\r\nPlace the rolled-out pizza dough on a pizza stone or baking sheet. Drizzle a bit of olive oil over the dough. Spread a thin layer of tomato sauce over the dough, leaving a border around the edges.\r\n\r\nAdd Cheese and Basil:\r\nArrange slices of fresh mozzarella evenly over the sauce. Tear fresh basil leaves and scatter them over the cheese. Season with salt and pepper to taste. Optionally, sprinkle grated Parmesan cheese on top.\r\n\r\nBake in the Oven:\r\nTransfer the pizza to the preheated oven and bake according to the dough's instructions or until the crust is golden and the cheese is melted and bubbly.\r\n\r\nServe:\r\nOnce the pizza is out of the oven, let it cool for a few minutes before slicing. Serve hot and enjoy your homemade Margherita Pizza!\r\n\r\nFeel free to customize the recipe to your liking. Margherita Pizza is known for its simplicity and fresh flavors, making it a delicious and classic choice.",
                            RecipeName = "Margherita Pizza",
                            Uid = new Guid("89330a5c-24d7-4574-bcf7-bdbf179dea9a")
                        });
                });

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.FileDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FileUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FileDetails");
                });

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IngredientCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IngredientNutrientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("UnitOfMeasure")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IngredientCategoryId");

                    b.HasIndex("IngredientNutrientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2418),
                            IconPath = "banana",
                            IngredientCategoryId = 1,
                            IngredientName = "Banana",
                            IngredientNutrientId = 1,
                            Uid = new Guid("9925c82c-08d6-4cda-ab78-527b905d5283"),
                            UnitOfMeasure = (short)0
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2421),
                            IconPath = "tomato",
                            IngredientCategoryId = 2,
                            IngredientName = "Tomato",
                            IngredientNutrientId = 2,
                            Uid = new Guid("2f949a3b-1ae4-4049-9650-8789c14dd55e"),
                            UnitOfMeasure = (short)0
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2424),
                            IconPath = "lemon",
                            IngredientCategoryId = 1,
                            IngredientName = "Lemon",
                            IngredientNutrientId = 3,
                            Uid = new Guid("a5479865-abb5-46e7-8760-434019083234"),
                            UnitOfMeasure = (short)0
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2429),
                            IconPath = "basil",
                            IngredientCategoryId = 3,
                            IngredientName = "Basil",
                            IngredientNutrientId = 4,
                            Uid = new Guid("332880f7-b13e-40bd-934a-3023eb918f44"),
                            UnitOfMeasure = (short)0
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2432),
                            IconPath = "redchilipapper",
                            IngredientCategoryId = 2,
                            IngredientName = "Red Chili Papper",
                            IngredientNutrientId = 5,
                            Uid = new Guid("5bc7e4d7-ed70-4e23-97d1-6f530515666b"),
                            UnitOfMeasure = (short)0
                        });
                });

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.IngredientCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("IngredientCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Fruit",
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2285),
                            IconPath = "fruit",
                            Uid = new Guid("94fefa39-648e-43f3-8f8b-1ec382123da5")
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Vegetables",
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2292),
                            IconPath = "vegetables",
                            Uid = new Guid("448f871e-063d-4bc8-bca6-27c26c326eb8")
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Spices",
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2295),
                            IconPath = "spices",
                            Uid = new Guid("1d03cf87-a71d-42f6-8267-40c054787b27")
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Meat",
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2298),
                            IconPath = "meat",
                            Uid = new Guid("c13ef27e-2353-468f-9854-971cdb4afb70")
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Seafood",
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2300),
                            IconPath = "seafood",
                            Uid = new Guid("4b35a85c-1287-4253-8999-4a26dcccc82d")
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Cereals",
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2304),
                            IconPath = "cereals",
                            Uid = new Guid("e9522658-3dc0-42b5-a153-d1fd5e4dfd1f")
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Dairy Product",
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2307),
                            IconPath = "dairyproduct",
                            Uid = new Guid("f1f9b9ef-f12a-48c2-bad2-5fb3fb0e7fde")
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Nuts",
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2310),
                            IconPath = "nuts",
                            Uid = new Guid("161f06f0-4772-4695-8ba3-d35374fd57b1")
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Other",
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2312),
                            IconPath = "other",
                            Uid = new Guid("8c9b4758-c669-4246-bca2-b9958218df81")
                        });
                });

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.IngredientNutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Carbohydrates")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Protein")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sugar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("IngredientNutrients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calories = 105m,
                            Carbohydrates = 27m,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2348),
                            Fat = 1m,
                            Protein = 1.3m,
                            Sugar = 14m,
                            Uid = new Guid("d8eda04a-3f98-4e65-89b4-a5cb3fad4acc")
                        },
                        new
                        {
                            Id = 2,
                            Calories = 18m,
                            Carbohydrates = 3.9m,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2352),
                            Fat = 0.2m,
                            Protein = 0.9m,
                            Sugar = 2.6m,
                            Uid = new Guid("925b3c5e-58c2-4c66-afc9-2629220fe0fd")
                        },
                        new
                        {
                            Id = 3,
                            Calories = 29m,
                            Carbohydrates = 9.3m,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2379),
                            Fat = 0.3m,
                            Protein = 1.1m,
                            Sugar = 2.5m,
                            Uid = new Guid("9c125d9b-ca69-4335-98af-2cf3185ed478")
                        },
                        new
                        {
                            Id = 4,
                            Calories = 23m,
                            Carbohydrates = 2.7m,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2383),
                            Fat = 0.6m,
                            Protein = 3.2m,
                            Sugar = 0.3m,
                            Uid = new Guid("0f306817-5243-47cb-bbed-fc80b67473b4")
                        },
                        new
                        {
                            Id = 5,
                            Calories = 40m,
                            Carbohydrates = 8.8m,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2389),
                            Fat = 0.4m,
                            Protein = 1.9m,
                            Sugar = 5.3m,
                            Uid = new Guid("209634e6-f892-4283-a850-8f9f43eb2840")
                        });
                });

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("Amount")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CulinaryRecipeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CulinaryRecipeId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = (short)0,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2475),
                            CulinaryRecipeId = 1,
                            IngredientId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = (short)0,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2477),
                            CulinaryRecipeId = 2,
                            IngredientId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = (short)0,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2479),
                            CulinaryRecipeId = 2,
                            IngredientId = 4
                        },
                        new
                        {
                            Id = 4,
                            Amount = (short)0,
                            Created = new DateTime(2024, 1, 28, 20, 27, 45, 605, DateTimeKind.Local).AddTicks(2481),
                            CulinaryRecipeId = 2,
                            IngredientId = 5
                        });
                });

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CookingMasterApi.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PictureUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.CulinaryRecipe", b =>
                {
                    b.HasOne("CookingMasterApi.Domain.Entities.CuisineType", "CuisineType")
                        .WithMany()
                        .HasForeignKey("CuisineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuisineType");
                });

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.Ingredient", b =>
                {
                    b.HasOne("CookingMasterApi.Domain.Entities.IngredientCategory", "IngredientCategory")
                        .WithMany()
                        .HasForeignKey("IngredientCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookingMasterApi.Domain.Entities.IngredientNutrient", "IngredientNutrient")
                        .WithMany()
                        .HasForeignKey("IngredientNutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IngredientCategory");

                    b.Navigation("IngredientNutrient");
                });

            modelBuilder.Entity("CookingMasterApi.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("CookingMasterApi.Domain.Entities.CulinaryRecipe", "CulinaryRecipe")
                        .WithMany()
                        .HasForeignKey("CulinaryRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookingMasterApi.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CulinaryRecipe");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CookingMasterApi.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CookingMasterApi.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookingMasterApi.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CookingMasterApi.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
